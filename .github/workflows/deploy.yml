name: Deploy

on:
  workflow_call:
    inputs:
      ENVIRONMENT_NAME:
        required: true
        type: string
      REGION: 
        type: string
      VERSION: 
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      DATABASE_NAME:
        required: true
      DATABASE_USER:
        required: true
      DATABASE_PASSWORD:
        required: true
      RAILS_APP_NAME:
        required: true
      RAILS_APP_SECRET_KEY_BASE:
        required: true

jobs:
  Terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT_NAME }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform init
      
    - name: Select Terraform Workspace
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform workspace select ${{ inputs.ENVIRONMENT_NAME }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}        
        TF_VAR_environment_name: ${{ inputs.ENVIRONMENT_NAME }}
        TF_VAR_db_subnet_name: "dbsn-fulfilment-${{ inputs.ENVIRONMENT_NAME }}-euwest2"
        TF_VAR_security_group_name: "sgfulfilment-${{ inputs.ENVIRONMENT_NAME }}-euwest2"
        TF_VAR_vpc_name: "vpc-fulfilment-${{ inputs.ENVIRONMENT_NAME }}-euwest2"
        TF_VAR_database_name: ${{ secrets.DATABASE_NAME }}
        TF_VAR_db_size: "db.t2.micro"
        TF_VAR_db_user: ${{ secrets.DATABASE_USER }}
        TF_VAR_db_password: ${{ secrets.DATABASE_PASSWORD }}
        TF_VAR_db_availability_zone: "eu-west-2a"
        TF_VAR_rails_app_name: "eb-fulfilment-${{ inputs.ENVIRONMENT_NAME }}-euwest2"
        TF_VAR_rails_app_secret_key_base: ${{ secrets.RAILS_APP_SECRET_KEY_BASE }}
        TF_VAR_rails_app_eb_stack: "64bit Amazon Linux 2 v3.4.1 running Ruby 3.0"
      run: terraform plan

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_environment_name: ${{ inputs.ENVIRONMENT_NAME }}
        TF_VAR_db_subnet_name: "dbsn-fulfilment-${{ inputs.ENVIRONMENT_NAME }}-euwest2"
        TF_VAR_security_group_name: "sgfulfilment-${{ inputs.ENVIRONMENT_NAME }}-euwest2"
        TF_VAR_vpc_name: "vpc-fulfilment-${{ inputs.ENVIRONMENT_NAME }}-euwest2"
        TF_VAR_database_name: ${{ secrets.DATABASE_NAME }}
        TF_VAR_db_size: "db.t2.micro"
        TF_VAR_db_user: ${{ secrets.DATABASE_USER }}
        TF_VAR_db_password: ${{ secrets.DATABASE_PASSWORD }}
        TF_VAR_db_availability_zone: "eu-west-2a"
        TF_VAR_rails_app_name: "eb-fulfilment-${{ inputs.ENVIRONMENT_NAME }}-euwest2"
        TF_VAR_rails_app_secret_key_base: ${{ secrets.RAILS_APP_SECRET_KEY_BASE }}
        TF_VAR_rails_app_eb_stack: "64bit Amazon Linux 2 v3.4.1 running Ruby 3.0"
      run: terraform apply -auto-approve
      
  Deploy:
    name: 'Deploy'    
    needs: [Terraform]
    #environment: ${{ inputs.ENVIRONMENT_NAME }} //Removed as it requires 2 reviews to live. 
    #As it depends on Terraform and that requires a review, that is sufficient
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Generate Version
      uses: paulhatch/semantic-version@v4.0.2
      id: version
      with:
        # The prefix to use to identify tags
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "(MAJOR)"
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "(MINOR)"
        # A string to determine the format of the version output
        format: "${major}.${minor}.${patch}"
        # Optional path to check for changes. If any changes are detected in the path the
        # 'changed' output will true. Enter multiple paths separated by spaces.
        # change_path: "src/my-service"
        # Named version, will be used as suffix for name version tag
        namespace: fulfilment
        # Indicate whether short tags like 'v1' should be supported. If false only full
        # tags like 'v1.0.0' will be recognized.
        short_tags: false
        # If this is set to true, *every* commit will be treated as a new version.
        bump_each_commit: true
    - name: Generate deployment package
      run: |
        zip -r ${{ steps.version.outputs.major }}${{ steps.version.outputs.minor }}${{ steps.version.outputs.patch }}.zip . -x '*.git*'
    - name: Deploy to EB
      uses: einaregilsson/beanstalk-deploy@v11
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: ${{ secrets.RAILS_APP_NAME }}
        environment_name: ${{ inputs.ENVIRONMENT_NAME }}
        version_label: ${{ steps.version.version }}
        region: ${{ inputs.REGION }}
        deployment_package: ${{ steps.outputs.version.major }}${{ steps.outputs.version.minor }}${{ steps.outputs.version.patch }}.zip
